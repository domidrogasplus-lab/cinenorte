"""
Aplicaci√≥n principal de Cine Norte
Interfaz de usuario para generar contenido audiovisual automatizado
"""
import streamlit as st
import os
import logging
from typing import Dict, List, Optional
import tempfile
from datetime import datetime
import json

# Importar m√≥dulos del sistema
from config import config
from content_analyzer import content_analyzer, ContentInfo
from script_generator import script_generator, GeneratedScript
from voice_synthesizer import voice_synthesizer, SubtitleCue
from video_editor import video_editor
from format_generator import format_generator, GeneratedFormat
from ai_optimizer import ai_optimizer, OptimizationAnalysis
from thumbnail_generator import thumbnail_generator, GeneratedThumbnail

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configurar p√°gina de Streamlit
st.set_page_config(
    page_title="Cine Norte - Generador de Contenido",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para Cine Norte
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #E50914, #C0C0C0);
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .main-header h1 {
        color: white;
        font-size: 3rem;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }
    
    .main-header p {
        color: white;
        font-size: 1.2rem;
        margin: 0.5rem 0 0 0;
    }
    
    .metric-card {
        background: #0A0A0A;
        color: #C0C0C0;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #E50914;
        margin: 0.5rem 0;
    }
    
    .success-message {
        background: #1a4d1a;
        color: #90EE90;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #4CAF50;
    }
    
    .warning-message {
        background: #4d3a1a;
        color: #FFD700;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #FFA500;
    }
    
    .error-message {
        background: #4d1a1a;
        color: #FFB6C1;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #FF6B6B;
    }
    
    .stButton > button {
        background: linear-gradient(45deg, #E50914, #8B0000);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: bold;
        transition: all 0.3s;
    }
    
    .stButton > button:hover {
        background: linear-gradient(45deg, #8B0000, #E50914);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }
</style>
""", unsafe_allow_html=True)

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Header principal
    st.markdown("""
    <div class="main-header">
        <h1>üé¨ CINE NORTE</h1>
        <p>Generador Automatizado de Contenido Audiovisual</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar para configuraci√≥n
    with st.sidebar:
        st.header("‚öôÔ∏è Configuraci√≥n")
        
        # Configuraci√≥n de APIs
        st.subheader("üîë APIs")
        openai_key = st.text_input("OpenAI API Key", type="password", help="Clave para generaci√≥n de guiones")
        tmdb_key = st.text_input("TMDB API Key", type="password", help="Clave para an√°lisis de contenido")
        
        # Configuraci√≥n de video
        st.subheader("üé• Video")
        target_platform = st.selectbox(
            "Plataforma Principal",
            ["youtube", "tiktok", "instagram", "facebook", "twitter"],
            help="Plataforma objetivo para el video principal"
        )
        
        video_style = st.selectbox(
            "Estilo Visual",
            ["cinematic", "dynamic", "dramatic"],
            help="Estilo visual del video"
        )
        
        # Configuraci√≥n de voz
        st.subheader("üé§ Voz")
        voice_profile = st.selectbox(
            "Perfil de Voz",
            ["cinenorte_male", "cinenorte_female", "dramatic", "energetic"],
            help="Perfil de voz para la narraci√≥n"
        )
        
        # Configuraci√≥n de duraci√≥n
        st.subheader("‚è±Ô∏è Duraci√≥n")
        max_duration = st.slider(
            "Duraci√≥n M√°xima (segundos)",
            min_value=30,
            max_value=300,
            value=120,
            help="Duraci√≥n m√°xima del video en segundos"
        )
    
    # Pesta√±as principales
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üîç An√°lisis de Contenido", 
        "üìù Generaci√≥n de Guion", 
        "üé¨ Creaci√≥n de Video", 
        "üìä Optimizaci√≥n IA", 
        "üìÅ Descargas"
    ])
    
    with tab1:
        content_analysis_tab()
    
    with tab2:
        script_generation_tab()
    
    with tab3:
        video_creation_tab()
    
    with tab4:
        optimization_tab()
    
    with tab5:
        downloads_tab()

def content_analysis_tab():
    """Pesta√±a de an√°lisis de contenido"""
    st.header("üîç An√°lisis de Contenido")
    
    # B√∫squeda de contenido
    col1, col2 = st.columns([2, 1])
    
    with col1:
        search_query = st.text_input(
            "Buscar Pel√≠cula o Serie",
            placeholder="Ej: Stranger Things, The Crown, La Casa de Papel...",
            help="Busca contenido en las principales plataformas de streaming"
        )
    
    with col2:
        content_type = st.selectbox("Tipo", ["all", "movie", "tv"])
    
    if st.button("üîç Buscar Contenido", type="primary"):
        if search_query:
            with st.spinner("Buscando contenido..."):
                try:
                    # Buscar contenido
                    content_results = content_analyzer.search_content(search_query, content_type)
                    
                    if content_results:
                        st.success(f"Encontrados {len(content_results)} resultados")
                        
                        # Mostrar resultados
                        for i, content in enumerate(content_results[:5]):  # Mostrar top 5
                            with st.expander(f"üé¨ {content.title} ({content.content_type.upper()})"):
                                col1, col2 = st.columns([1, 2])
                                
                                with col1:
                                    if content.poster_url:
                                        st.image(content.poster_url, width=200)
                                
                                with col2:
                                    st.write(f"**Plataforma:** {content.platform}")
                                    st.write(f"**G√©nero:** {', '.join(content.genre)}")
                                    st.write(f"**Rating:** {content.rating}/10")
                                    st.write(f"**Popularidad:** {content.popularity:.1f}")
                                    st.write(f"**Fecha:** {content.release_date}")
                                    st.write(f"**Idioma:** {content.language}")
                                    
                                    if content.overview:
                                        st.write(f"**Sinopsis:** {content.overview[:200]}...")
                                    
                                    # Bot√≥n para seleccionar
                                    if st.button(f"Seleccionar {content.title}", key=f"select_{i}"):
                                        st.session_state.selected_content = content
                                        st.success(f"Contenido seleccionado: {content.title}")
                    else:
                        st.warning("No se encontraron resultados. Intenta con otros t√©rminos.")
                        
                except Exception as e:
                    st.error(f"Error buscando contenido: {e}")
        else:
            st.warning("Por favor ingresa un t√©rmino de b√∫squeda")
    
    # Mostrar contenido trending
    st.subheader("üî• Contenido Trending")
    
    if st.button("Obtener Contenido Popular"):
        with st.spinner("Obteniendo contenido trending..."):
            try:
                trending_content = content_analyzer.get_content_for_analysis(limit=10)
                
                if trending_content:
                    st.success(f"Obtenidos {len(trending_content)} contenidos trending")
                    
                    # Mostrar en grid
                    cols = st.columns(3)
                    for i, content in enumerate(trending_content):
                        with cols[i % 3]:
                            with st.container():
                                st.markdown(f"**{content.title}**")
                                st.write(f"‚≠ê {content.rating}/10")
                                st.write(f"üì∫ {content.platform}")
                                st.write(f"üé≠ {', '.join(content.genre[:2])}")
                                
                                if st.button(f"Seleccionar", key=f"trending_{i}"):
                                    st.session_state.selected_content = content
                                    st.success(f"Seleccionado: {content.title}")
                else:
                    st.warning("No se pudo obtener contenido trending")
                    
            except Exception as e:
                st.error(f"Error obteniendo contenido trending: {e}")
    
    # Mostrar contenido seleccionado
    if hasattr(st.session_state, 'selected_content'):
        st.subheader("‚úÖ Contenido Seleccionado")
        content = st.session_state.selected_content
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            if content.poster_url:
                st.image(content.poster_url, width=300)
        
        with col2:
            st.markdown(f"### {content.title}")
            st.write(f"**Tipo:** {content.content_type.upper()}")
            st.write(f"**Plataforma:** {content.platform}")
            st.write(f"**G√©neros:** {', '.join(content.genre)}")
            st.write(f"**Rating:** {content.rating}/10")
            st.write(f"**Popularidad:** {content.popularity:.1f}")
            st.write(f"**Fecha de estreno:** {content.release_date}")
            st.write(f"**Idioma:** {content.language}")
            st.write(f"**Pa√≠s:** {content.country}")
            
            if content.overview:
                st.write(f"**Sinopsis:** {content.overview}")
            
            if content.cast:
                st.write(f"**Reparto:** {', '.join(content.cast[:3])}")
            
            if content.director:
                st.write(f"**Director:** {', '.join(content.director)}")
            
            # An√°lisis de viabilidad
            st.subheader("üìä An√°lisis de Viabilidad")
            viability = content_analyzer.analyze_content_viability(content)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Score General", f"{viability['total_score']:.1f}/100")
            with col2:
                st.metric("Viabilidad", viability['viability'])
            with col3:
                st.metric("Factores", len(viability['factors']))
            
            # Mostrar factores
            st.write("**Factores de an√°lisis:**")
            for factor, score in viability['factors'].items():
                st.progress(score / 100, text=f"{factor}: {score:.1f}")
            
            # Mostrar recomendaciones
            if viability['recommendations']:
                st.write("**Recomendaciones:**")
                for rec in viability['recommendations']:
                    st.write(f"‚Ä¢ {rec}")

def script_generation_tab():
    """Pesta√±a de generaci√≥n de guion"""
    st.header("üìù Generaci√≥n de Guion")
    
    if not hasattr(st.session_state, 'selected_content'):
        st.warning("‚ö†Ô∏è Primero selecciona un contenido en la pesta√±a 'An√°lisis de Contenido'")
        return
    
    content = st.session_state.selected_content
    
    # Configuraci√≥n del guion
    col1, col2 = st.columns(2)
    
    with col1:
        target_platform = st.selectbox(
            "Plataforma Objetivo",
            ["youtube", "tiktok", "instagram", "facebook", "twitter"],
            key="script_platform"
        )
        
        script_style = st.selectbox(
            "Estilo del Guion",
            ["dynamic", "dramatic", "comedic", "analytical"],
            key="script_style"
        )
    
    with col2:
        duration_target = st.slider(
            "Duraci√≥n Objetivo (segundos)",
            min_value=30,
            max_value=300,
            value=120,
            key="script_duration"
        )
        
        include_spoilers = st.checkbox(
            "Incluir Spoilers Menores",
            value=False,
            help="Incluye spoilers menores para mayor impacto"
        )
    
    # Generar guion
    if st.button("üé¨ Generar Guion", type="primary"):
        with st.spinner("Generando guion con IA..."):
            try:
                # Generar guion
                script = script_generator.generate_script(
                    content=content,
                    target_platform=target_platform,
                    duration_target=duration_target,
                    style=script_style
                )
                
                # Guardar en sesi√≥n
                st.session_state.generated_script = script
                
                st.success("‚úÖ Guion generado exitosamente!")
                
                # Mostrar resumen
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Duraci√≥n", f"{script.total_duration}s")
                with col2:
                    st.metric("Palabras", script.word_count)
                with col3:
                    st.metric("Secciones", len(script.sections))
                with col4:
                    st.metric("Plataforma", script.target_platform.upper())
                
            except Exception as e:
                st.error(f"Error generando guion: {e}")
    
    # Mostrar guion generado
    if hasattr(st.session_state, 'generated_script'):
        script = st.session_state.generated_script
        
        st.subheader("üìñ Guion Generado")
        
        # Tabs para diferentes vistas
        tab1, tab2, tab3 = st.tabs(["üìù Texto Completo", "üé≠ Por Secciones", "üìä Metadatos"])
        
        with tab1:
            st.text_area("Guion Completo", script.raw_text, height=400)
            
            # Bot√≥n para descargar
            if st.button("üíæ Descargar Guion (.txt)"):
                filename = script_generator.export_script_to_txt(script)
                st.success(f"Guion guardado como: {filename}")
        
        with tab2:
            for i, section in enumerate(script.sections, 1):
                with st.expander(f"Secci√≥n {i}: {section.type.upper()}"):
                    st.write(f"**Duraci√≥n:** {section.duration_seconds}s")
                    st.write(f"**Emoci√≥n:** {section.emotion}")
                    st.write(f"**Contenido:**")
                    st.write(section.content)
                    
                    if section.visual_cues:
                        st.write(f"**Indicaciones visuales:** {', '.join(section.visual_cues)}")
                    
                    if section.emphasis_words:
                        st.write(f"**Palabras de √©nfasis:** {', '.join(section.emphasis_words)}")
        
        with tab3:
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**T√≠tulos Sugeridos:**")
                for title in script.title_suggestions:
                    st.write(f"‚Ä¢ {title}")
                
                st.write("**Hashtags:**")
                hashtag_text = " ".join(script.hashtags)
                st.code(hashtag_text)
            
            with col2:
                st.write("**Configuraci√≥n:**")
                st.write(f"‚Ä¢ Estilo Visual: {script.visual_style}")
                st.write(f"‚Ä¢ M√∫sica Sugerida: {script.music_suggestion}")
                st.write(f"‚Ä¢ Plataforma: {script.target_platform}")
                st.write(f"‚Ä¢ Duraci√≥n Total: {script.total_duration}s")

def video_creation_tab():
    """Pesta√±a de creaci√≥n de video"""
    st.header("üé¨ Creaci√≥n de Video")
    
    if not hasattr(st.session_state, 'generated_script'):
        st.warning("‚ö†Ô∏è Primero genera un guion en la pesta√±a 'Generaci√≥n de Guion'")
        return
    
    script = st.session_state.generated_script
    
    # Configuraci√≥n del video
    col1, col2 = st.columns(2)
    
    with col1:
        video_style = st.selectbox(
            "Estilo Visual",
            ["cinematic", "dynamic", "dramatic"],
            key="video_style"
        )
        
        voice_profile = st.selectbox(
            "Perfil de Voz",
            ["cinenorte_male", "cinenorte_female", "dramatic", "energetic"],
            key="voice_profile"
        )
    
    with col2:
        include_subtitles = st.checkbox("Incluir Subt√≠tulos", value=True)
        include_music = st.checkbox("Incluir M√∫sica de Fondo", value=True)
        
        quality = st.selectbox(
            "Calidad de Video",
            ["720p", "1080p", "4K"],
            index=1
        )
    
    # Generar audio y video
    if st.button("üé• Generar Video", type="primary"):
        with st.spinner("Generando audio y video..."):
            try:
                # Generar audio
                st.write("üé§ Generando audio...")
                audio_path, subtitles = voice_synthesizer.synthesize_script(
                    script=script,
                    voice_profile=voice_profile,
                    output_format="mp3"
                )
                
                if audio_path:
                    st.success("‚úÖ Audio generado exitosamente!")
                    
                    # Generar video
                    st.write("üé¨ Generando video...")
                    video_path = video_editor.create_video(
                        script=script,
                        audio_path=audio_path,
                        subtitles=subtitles,
                        format_type=script.target_platform,
                        style=video_style
                    )
                    
                    if video_path:
                        st.success("‚úÖ Video generado exitosamente!")
                        
                        # Guardar en sesi√≥n
                        st.session_state.generated_video = video_path
                        st.session_state.generated_audio = audio_path
                        st.session_state.generated_subtitles = subtitles
                        
                        # Mostrar video
                        st.video(video_path)
                        
                        # Mostrar informaci√≥n
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Duraci√≥n", f"{script.total_duration}s")
                        with col2:
                            st.metric("Formato", script.target_platform.upper())
                        with col3:
                            st.metric("Calidad", quality)
                    else:
                        st.error("Error generando video")
                else:
                    st.error("Error generando audio")
                    
            except Exception as e:
                st.error(f"Error en la generaci√≥n: {e}")
    
    # Generar formatos m√∫ltiples
    if hasattr(st.session_state, 'generated_video'):
        st.subheader("üì± Formatos M√∫ltiples")
        
        if st.button("üîÑ Generar Todos los Formatos"):
            with st.spinner("Generando formatos para todas las plataformas..."):
                try:
                    content_info = {
                        "title": script.title,
                        "platform": script.content.platform,
                        "content_type": script.content.content_type
                    }
                    
                    generated_formats = format_generator.generate_all_formats(
                        source_video_path=st.session_state.generated_video,
                        script_title=script.title,
                        content_info=content_info
                    )
                    
                    if generated_formats:
                        st.success(f"‚úÖ Generados {len(generated_formats)} formatos!")
                        st.session_state.generated_formats = generated_formats
                        
                        # Mostrar formatos generados
                        for fmt in generated_formats:
                            with st.expander(f"üì± {fmt.format_type.upper()}"):
                                col1, col2 = st.columns([1, 2])
                                
                                with col1:
                                    if fmt.thumbnail_path:
                                        st.image(fmt.thumbnail_path, width=200)
                                
                                with col2:
                                    st.write(f"**Plataforma:** {fmt.metadata['platform']}")
                                    st.write(f"**Dimensiones:** {fmt.metadata['dimensions']}")
                                    st.write(f"**Aspecto:** {fmt.metadata['aspect_ratio']}")
                                    st.write(f"**Score:** {fmt.optimization_score:.1f}/100")
                                    
                                    if st.button(f"Ver Video", key=f"view_{fmt.format_type}"):
                                        st.video(fmt.video_path)
                    else:
                        st.warning("No se pudieron generar formatos")
                        
                except Exception as e:
                    st.error(f"Error generando formatos: {e}")

def optimization_tab():
    """Pesta√±a de optimizaci√≥n con IA"""
    st.header("üìä Optimizaci√≥n con IA")
    
    if not hasattr(st.session_state, 'generated_script'):
        st.warning("‚ö†Ô∏è Primero genera un guion en la pesta√±a 'Generaci√≥n de Guion'")
        return
    
    script = st.session_state.generated_script
    
    # An√°lisis de optimizaci√≥n
    if st.button("üîç Analizar con IA", type="primary"):
        with st.spinner("Analizando contenido con IA..."):
            try:
                video_path = st.session_state.get('generated_video')
                
                analysis = ai_optimizer.optimize_content(
                    script=script,
                    content_info=script.content,
                    video_path=video_path
                )
                
                st.session_state.optimization_analysis = analysis
                st.success("‚úÖ An√°lisis completado!")
                
            except Exception as e:
                st.error(f"Error en el an√°lisis: {e}")
    
    # Mostrar an√°lisis
    if hasattr(st.session_state, 'optimization_analysis'):
        analysis = st.session_state.optimization_analysis
        
        st.subheader("üìà Resultados del An√°lisis")
        
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Score General",
                f"{analysis.overall_score:.1f}/100",
                delta=f"{analysis.overall_score - 50:.1f}"
            )
        
        with col2:
            st.metric(
                "Engagement",
                f"{analysis.engagement_potential:.1f}/100"
            )
        
        with col3:
            st.metric(
                "Viralidad",
                f"{analysis.viral_probability:.1f}/100"
            )
        
        with col4:
            st.metric(
                "SEO",
                f"{analysis.seo_score:.1f}/100"
            )
        
        # Gr√°ficos de an√°lisis
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä An√°lisis Detallado")
            
            metrics = {
                "Calidad de Contenido": analysis.content_score,
                "Potencial de Engagement": analysis.engagement_potential,
                "Probabilidad Viral": analysis.viral_probability,
                "Optimizaci√≥n SEO": analysis.seo_score,
                "Impacto Visual": analysis.visual_impact,
                "Calidad de Audio": analysis.audio_quality
            }
            
            for metric, score in metrics.items():
                st.progress(score / 100, text=f"{metric}: {score:.1f}/100")
        
        with col2:
            st.subheader("üéØ Recomendaciones")
            
            if analysis.recommendations:
                for i, rec in enumerate(analysis.recommendations, 1):
                    st.write(f"{i}. {rec}")
            else:
                st.write("No hay recomendaciones espec√≠ficas")
        
        # Mejoras sugeridas
        if analysis.improvements:
            st.subheader("üîß Mejoras Sugeridas")
            for i, improvement in enumerate(analysis.improvements, 1):
                st.write(f"{i}. {improvement}")
        
        # An√°lisis de tendencias
        st.subheader("üìà An√°lisis de Tendencias")
        
        # Simular an√°lisis de tendencias
        trending_keywords = ["netflix", "streaming", "pel√≠cula", "serie", "estreno"]
        st.write("**Keywords Trending:**")
        for keyword in trending_keywords:
            st.write(f"‚Ä¢ #{keyword}")
        
        # An√°lisis de competencia
        st.write("**An√°lisis de Competencia:**")
        st.write("‚Ä¢ Contenido similar: 15 videos")
        st.write("‚Ä¢ Engagement promedio: 75%")
        st.write("‚Ä¢ Oportunidad: Alta")

def downloads_tab():
    """Pesta√±a de descargas"""
    st.header("üìÅ Descargas")
    
    if not hasattr(st.session_state, 'generated_script'):
        st.warning("‚ö†Ô∏è No hay contenido generado para descargar")
        return
    
    script = st.session_state.generated_script
    
    # Archivos disponibles
    st.subheader("üìÑ Archivos Generados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**üìù Guion**")
        if st.button("üíæ Descargar Guion (.txt)"):
            filename = script_generator.export_script_to_txt(script)
            st.success(f"Guion guardado: {filename}")
        
        st.write("**üé§ Audio**")
        if hasattr(st.session_state, 'generated_audio'):
            audio_path = st.session_state.generated_audio
            if os.path.exists(audio_path):
                with open(audio_path, "rb") as file:
                    st.download_button(
                        label="üíæ Descargar Audio (.mp3)",
                        data=file.read(),
                        file_name=f"audio_{script.title.replace(' ', '_')}.mp3",
                        mime="audio/mpeg"
                    )
        
        st.write("**üìù Subt√≠tulos**")
        if hasattr(st.session_state, 'generated_subtitles'):
            subtitles = st.session_state.generated_subtitles
            if subtitles:
                # Exportar subt√≠tulos
                vtt_filename = voice_synthesizer.export_subtitles(subtitles)
                srt_filename = voice_synthesizer.export_subtitles_srt(subtitles)
                
                with open(vtt_filename, "rb") as file:
                    st.download_button(
                        label="üíæ Descargar Subt√≠tulos (.vtt)",
                        data=file.read(),
                        file_name=f"subtitulos_{script.title.replace(' ', '_')}.vtt",
                        mime="text/vtt"
                    )
                
                with open(srt_filename, "rb") as file:
                    st.download_button(
                        label="üíæ Descargar Subt√≠tulos (.srt)",
                        data=file.read(),
                        file_name=f"subtitulos_{script.title.replace(' ', '_')}.srt",
                        mime="text/plain"
                    )
    
    with col2:
        st.write("**üé¨ Videos**")
        if hasattr(st.session_state, 'generated_video'):
            video_path = st.session_state.generated_video
            if os.path.exists(video_path):
                with open(video_path, "rb") as file:
                    st.download_button(
                        label="üíæ Descargar Video Principal",
                        data=file.read(),
                        file_name=f"video_{script.title.replace(' ', '_')}.mp4",
                        mime="video/mp4"
                    )
        
        # Formatos m√∫ltiples
        if hasattr(st.session_state, 'generated_formats'):
            st.write("**üì± Formatos M√∫ltiples**")
            for fmt in st.session_state.generated_formats:
                if os.path.exists(fmt.video_path):
                    with open(fmt.video_path, "rb") as file:
                        st.download_button(
                            label=f"üíæ {fmt.format_type.upper()}",
                            data=file.read(),
                            file_name=f"{script.title.replace(' ', '_')}_{fmt.format_type}.mp4",
                            mime="video/mp4"
                        )
        
        # Miniaturas
        if hasattr(st.session_state, 'generated_formats'):
            st.write("**üñºÔ∏è Miniaturas**")
            for fmt in st.session_state.generated_formats:
                if fmt.thumbnail_path and os.path.exists(fmt.thumbnail_path):
                    with open(fmt.thumbnail_path, "rb") as file:
                        st.download_button(
                            label=f"üñºÔ∏è {fmt.format_type.upper()}",
                            data=file.read(),
                            file_name=f"thumbnail_{script.title.replace(' ', '_')}_{fmt.format_type}.jpg",
                            mime="image/jpeg"
                        )
    
    # Resumen de generaci√≥n
    st.subheader("üìä Resumen de Generaci√≥n")
    
    if hasattr(st.session_state, 'generated_script'):
        script = st.session_state.generated_script
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Duraci√≥n Total", f"{script.total_duration}s")
            st.metric("Palabras", script.word_count)
            st.metric("Secciones", len(script.sections))
        
        with col2:
            st.metric("Plataforma", script.target_platform.upper())
            st.metric("Estilo", script.visual_style)
            st.metric("M√∫sica", script.music_suggestion)
        
        with col3:
            if hasattr(st.session_state, 'optimization_analysis'):
                analysis = st.session_state.optimization_analysis
                st.metric("Score General", f"{analysis.overall_score:.1f}/100")
                st.metric("Engagement", f"{analysis.engagement_potential:.1f}/100")
                st.metric("Viralidad", f"{analysis.viral_probability:.1f}/100")
    
    # Limpiar archivos temporales
    if st.button("üóëÔ∏è Limpiar Archivos Temporales"):
        try:
            # Limpiar archivos de cada m√≥dulo
            voice_synthesizer.cleanup_temp_files()
            video_editor.cleanup_temp_files()
            format_generator.cleanup_temp_files()
            thumbnail_generator.cleanup_temp_files()
            
            st.success("‚úÖ Archivos temporales limpiados")
        except Exception as e:
            st.error(f"Error limpiando archivos: {e}")

if __name__ == "__main__":
    main()
